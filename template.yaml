AWSTemplateFormatVersion: "2010-09-09"

Resources:
  # A bucket that hosts the website.
  S3BucketWebsite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: gymlog.indianakernick.com
      Tags:
        - Key: project:gym-log
      WebsiteConfiguration:
        IndexDocument: index.html

  S3BucketPolicyWebsite:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketWebsite
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub
              - arn:aws:s3:::${Bucket}/*
              - Bucket: !Ref S3BucketWebsite

  # The main database for all user data.
  DynamoDbTableUser:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Id
          AttributeType: S
        - AttributeName: ModifiedVersion
          AttributeType: "N"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Id
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: LSI-ModifiedVersion
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
            - AttributeName: ModifiedVersion
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
      TableClass: STANDARD
      TableName: gym-log.User
      Tags:
        - Key: project:gym-log
          Value: ""

  # A Cognito user pool using a fairly basic email and password configuration.
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Mutable: false
          Name: email
          Required: true
      UserPoolName: gym-log
      UserPoolTags:
        project:gym-log: ""

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DeletionPolicy: Retain
    Properties:
      AccessTokenValidity: 60 # see TokenValidityUnits
      AllowedOAuthFlowsUserPoolClient: false
      AuthSessionValidity: 3 # minutes
      ClientName: gym-log
      EnableTokenRevocation: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      GenerateSecret: false
      IdTokenValidity: 60 # see TokenValidityUnits
      RefreshTokenValidity: 30 # see TokenValidityUnits
      SupportedIdentityProviders:
        - COGNITO
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      UserPoolId: !Ref CognitoUserPool

  # The execution role for the proxy Lambda function. This allows the Lambda to
  # write CloudWatch logs and access the database.
  IamRoleLambdaProxyExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                # We can't !Sub the Lambda name because that creates a circular
                # dependency.
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/gym-log:*
          PolicyName: gym-log.lambda.log
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                Resource:
                  - !Sub
                    - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}
                    - Table: !Ref DynamoDbTableUser
                  - !Sub
                    - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}/index/*
                    - Table: !Ref DynamoDbTableUser
          PolicyName: gym-log.lambda.dynamodb
      MaxSessionDuration: 3600 # seconds
      RoleName: gym-log.lambda
      Tags:
        - Key: project:gym-log
          Value: ""

  # The proxy Lambda function processes all API requests from API Gateway.
  LambdaProxy:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        S3Bucket: indianakernick-lambda
        S3Key: gym-log.zip
      Environment:
        Variables:
          RUST_BACKTRACE: "1"
      FunctionName: gym-log
      Handler: bootstrap
      MemorySize: 128 # MB
      PackageType: Zip
      Role: !GetAtt IamRoleLambdaProxyExecution.Arn
      Runtime: provided.al2
      Tags:
        - Key: project:gym-log
      Timeout: 3 # seconds

  # A permission that allows API Gateway to invoke the proxy Lambda function.
  LambdaPermissionProxyApi:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaProxy.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*
        - Api: !Ref Api

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      CorsConfiguration:
        AllowHeaders:
          - Authorization
          - Content-Type
          - Retry-After
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - PUT
        AllowOrigins:
          - !GetAtt S3BucketWebsite.WebsiteURL
          # TODO: don't forget to remove localhost
          - http://localhost:5173
        MaxAge: 86400
      Name: gym-log
      ProtocolType: HTTP
      Tags:
        project:gym-log: ""

  ApiStageDefault:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      AutoDeploy: true
      DeploymentId: !Ref ApiDeployment
      StageName: $default
      Tags:
        project:gym-log: ""

  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
     - ApiRouteUserGet
     - ApiRouteUserSnapshotGet
     - ApiRouteUserSnapshotPut
     - ApiRouteUserMeasurementDelete
     - ApiRouteUserMeasurementPut
     - ApiRouteUserWorkoutDelete
     - ApiRouteUserWorkoutPut
     - ApiRouteUserWorkoutExerciseDelete
     - ApiRouteUserWorkoutExercisePut
     - ApiRouteUserWorkoutOrderPut
    Properties:
      ApiId: !Ref Api

  # An authorizer that will parse the Authorization HTTP header as a JWT. It
  # will use the issuer URI to get the public key and verify the signature. It
  # will also check the issuer, audience and expiry claims.
  ApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref Api
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClient
        Issuer: !GetAtt CognitoUserPool.ProviderURL
      Name: gym-log

  # An integration that forms the bridge between an API Gateway route and the
  # proxy Lambda.
  ApiIntegrationProxy:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations
        - Lambda: !GetAtt LambdaProxy.Arn
      PayloadFormatVersion: "2.0"
      TimeoutInMillis: 30000

  # Below are the route definitions for the whole API.

  ApiRouteUserGet:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: GET /user
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserSnapshotGet:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: GET /user/snapshot
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserSnapshotPut:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: PUT /user/snapshot
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserMeasurementDelete:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: DELETE /user/measurement/{measurementId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserMeasurementPut:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: PUT /user/measurement/{measurementId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserWorkoutDelete:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: DELETE /user/workout/{workoutId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserWorkoutPut:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: PUT /user/workout/{workoutId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserWorkoutExerciseDelete:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: DELETE /user/workout/{workoutId}/exercise/{exerciseId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserWorkoutExercisePut:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: PUT /user/workout/{workoutId}/exercise/{exerciseId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

  ApiRouteUserWorkoutOrderPut:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: PUT /user/workout/{workoutId}/order
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegrationProxy

Outputs:
  CognitoClientId:
    Value: !Ref CognitoUserPoolClient
  ApiBaseUrl:
    Value: !Sub
      - https://${Id}.execute-api.${AWS::Region}.amazonaws.com
      - Id: !Ref Api
  WebsiteUrl:
    Value: !GetAtt S3BucketWebsite.WebsiteURL
